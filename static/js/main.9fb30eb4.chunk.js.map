{"version":3,"sources":["GlobalStyle.js","instructions.png","styled.js","App.js","index.js"],"names":["createGlobalStyle","Wrapper","styled","main","Title","h1","Subtitle","h2","Button","button","Input","input","Image","img","Score","div","Rating","App","useState","file","setFile","rating","setRating","score","setScore","hiddenFileInput","React","useRef","rate","a","document","getElementById","ratelist","ratings","UNCHONKY","CHONKYISH","CHONKY","cocoSsd","model","detect","predictions","length","class","catRatio","bbox","catCategory","Math","round","rand","floor","random","src","instructions","URL","createObjectURL","alt","name","onLoad","id","onClick","e","current","click","type","onChange","target","files","ref","accept","ReactDOM","render","StrictMode","GlobalStyle"],"mappings":"25CAEeA,kBAAf,K,0DCFe,MAA0B,yC,87ECElC,IAAMC,EAAUC,IAAOC,KAAV,KAQPC,EAAQF,IAAOG,GAAV,KAULC,EAAWJ,IAAOK,GAAV,KA4CRC,EAASN,IAAOO,OAAV,KAwCNC,EAAQR,IAAOS,MAAV,KAILC,EAAQV,IAAOW,IAAV,KAMLC,EAAQZ,IAAOa,IAAV,KAMLC,EAASd,IAAOa,IAAV,KCpCJE,MAnEf,WAAgB,IAAD,EACWC,qBADX,mBACNC,EADM,KACAC,EADA,OAEeF,qBAFf,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,qBAHb,mBAGNK,EAHM,KAGCC,EAHD,KAWPC,EAAkBC,IAAMC,SAKxBC,EAAI,uCAAG,wCAAAC,EAAA,yDACNR,EADM,wBAELR,EAAMiB,SAASC,eAAe,OAE5BC,EAAW,CAACC,EAAQC,SAAUD,EAAQE,UAAWF,EAAQG,QAJtD,SAOWC,MAPX,cAOHC,EAPG,gBAUiBA,EAAMC,OAAO1B,GAV9B,OAYkB,KAFrB2B,EAVG,QAYOC,QAAyC,QAAzBD,EAAY,GAAGE,MAC7CpB,EAAU,yCAEJqB,EAAWH,EAAY,GAAGI,KAAK,GAAKJ,EAAY,GAAGI,KAAK,GACxDC,EAAcF,GAAY,EAAI,EAAIG,KAAKC,MAAMJ,GAE7CK,EAAOF,KAAKG,MAAMH,KAAKI,SAAWlB,EAASa,GAAaJ,QAC9DjB,EAASsB,KAAKC,MAAM,IAAMJ,IAC1BrB,EAAUU,EAASa,GAAaG,KApBzB,4CAAH,qDAyBV,OACE,eAAC/C,EAAD,WACE,cAACG,EAAD,uBACA,cAACE,EAAD,oDACEa,GAAQ,cAACP,EAAD,CAAOuC,IAAKC,IACrBjC,GACC,cAACP,EAAD,CACEuC,IAAKE,IAAIC,gBAAgBnC,GACzBoC,IAAKpC,EAAKqC,KACVC,OAAQ7B,EACR8B,GAAG,QAGNnC,GAAS,eAACT,EAAD,qBAAeS,KACxBF,GAAU,cAACL,EAAD,UAASK,IACpB,cAACb,EAAD,CAAQmD,QA5CQ,SAACC,GACnBnC,EAAgBoC,QAAQC,SA2CtB,0BACA,cAACpD,EAAD,CACEqD,KAAK,OACLC,SAtDe,SAACJ,GACpBtC,IACAE,IACAJ,EAAQwC,EAAEK,OAAOC,MAAM,KAoDnBC,IAAK1C,EACL2C,OAAO,gBCzEfC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAD,IACA,cAAC,EAAD,OAEF1C,SAASC,eAAe,W","file":"static/js/main.9fb30eb4.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport default createGlobalStyle`\r\n    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap');\r\n    @import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap');\r\n    :root {\r\n        --background-color: white;\r\n    }\r\n\r\n    html {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n\r\n    #root {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n\r\n    body {\r\n        background-color: var(--background-color);\r\n        width: 100%;\r\n        height: 100%;\r\n        margin: 0;\r\n    }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/instructions.659042d3.png\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n  height: 100%;\r\n  width: 50%;\r\n  margin: auto;\r\n  padding-top: 3%;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  color: #242423;\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 100px;\r\n  margin-top: -50px;\r\n  text-align: center;\r\n  font-family: \"Open Sans\", sans-serif;\r\n`;\r\n\r\nexport const Subtitle = styled.h2`\r\n  color: #242423;\r\n  margin: -10px;\r\n  padding: 0;\r\n  text-align: center;\r\n  font-family: 'Lato', sans-serif;\r\n  animation: colorchange 10s infinite alternate;\r\n\r\n  @keyframes colorchange {\r\n    0% {\r\n      color: blue;\r\n    }\r\n    10% {\r\n      color: #8e44ad;\r\n    }\r\n    20% {\r\n      color: #1abc9c;\r\n    }\r\n    30% {\r\n      color: #d35400;\r\n    }\r\n    40% {\r\n      color: blue;\r\n    }\r\n    50% {\r\n      color: #34495e;\r\n    }\r\n    60% {\r\n      color: blue;\r\n    }\r\n    70% {\r\n      color: #2980b9;\r\n    }\r\n    80% {\r\n      color: #f1c40f;\r\n    }\r\n    90% {\r\n      color: #2980b9;\r\n    }\r\n    100% {\r\n      color: pink;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border-color: transparent;\r\n  background-color: black;\r\n  margin: 0px;\r\n  margin-top: 20px;\r\n  font-family: \"Open Sans\", sans-serif;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  padding: 10px;\r\n  text-align: center;\r\n  transition: 0.2s;\r\n  background-size: 200% auto;\r\n  color: #fff;\r\n  width: 200px;\r\n  transition: all 0.3s;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  border-radius: 25px;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    box-shadow: 0 10px 20px rgba(18, 17, 17, 0.19),\r\n      0 6px 6px rgba(0, 0, 0, 0.23);\r\n    margin: 25px 10px 12px;\r\n    background-image: linear-gradient(\r\n      to right,\r\n      #3c00f1 30%,\r\n      #001cf1 51%,\r\n      #004df4 90%\r\n    );\r\n    background-position: center;\r\n  }\r\n\r\n  &:active {\r\n    box-shadow: 1px 3px 2px #ced4da;\r\n    transform: translateY(3px);\r\n    border: none;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: none;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  max-width: 60%;\r\n  display: block;\r\n  margin: 2em auto 1em auto;\r\n`;\r\n\r\nexport const Score = styled.div`\r\n  font-size: 30px;\r\n  font-family: \"Open Sans\", sans-serif;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport const Rating = styled.div`\r\n  font-family: \"Lato\", sans-serif;\r\n  font-size: 20px;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\nimport ratings from \"./ratings.json\";\r\nimport instructions from \"./instructions.png\";\r\nimport {\r\n  Wrapper,\r\n  Title,\r\n  Subtitle,\r\n  Button,\r\n  Input,\r\n  Image,\r\n  Result,\r\n  Score,\r\n  Rating,\r\n} from \"./styled\";\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState();\r\n  const [rating, setRating] = useState();\r\n  const [score, setScore] = useState();\r\n\r\n  const handleUpload = (e) => {\r\n    setRating();\r\n    setScore();\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const hiddenFileInput = React.useRef();\r\n  const handleClick = (e) => {\r\n    hiddenFileInput.current.click();\r\n  };\r\n\r\n  const rate = async () => {\r\n    if (!rating) {\r\n      let img = document.getElementById(\"img\");\r\n\r\n      const ratelist = [ratings.UNCHONKY, ratings.CHONKYISH, ratings.CHONKY];\r\n\r\n      // Load the model\r\n      const model = await cocoSsd.load();\r\n\r\n      // Rate the chonk\r\n      const predictions = await model.detect(img);\r\n\r\n      if (predictions.length === 0 || predictions[0].class !== \"cat\") {\r\n        setRating(\"It looks like we can't find a cat :(\");\r\n      } else {\r\n        const catRatio = predictions[0].bbox[2] / predictions[0].bbox[3];\r\n        const catCategory = catRatio >= 1 ? 2 : Math.round(catRatio);\r\n\r\n        const rand = Math.floor(Math.random() * ratelist[catCategory].length);\r\n        setScore(Math.round(100 * catRatio));\r\n        setRating(ratelist[catCategory][rand]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Title>Chonkii.</Title>\r\n      <Subtitle>how chonky is your cat? üê±</Subtitle>\r\n      {!file && <Image src={instructions}></Image>}\r\n      {file && (\r\n        <Image\r\n          src={URL.createObjectURL(file)}\r\n          alt={file.name}\r\n          onLoad={rate}\r\n          id=\"img\"\r\n        ></Image>\r\n      )}\r\n      {score && <Score>Score: {score}</Score>}\r\n      {rating && <Rating>{rating}</Rating>}\r\n      <Button onClick={handleClick}>UPLOAD IMAGE</Button>\r\n      <Input\r\n        type=\"file\"\r\n        onChange={handleUpload}\r\n        ref={hiddenFileInput}\r\n        accept=\"image/*\"\r\n      ></Input>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}